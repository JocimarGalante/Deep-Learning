setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/06-veículos")
data <- read.csv("6-veiculos.csv")
View(data)
data$a <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method = c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
View(data)
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$tipo, p = 0.8, list = F)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
rf <- train(tipo ~ ., data = normalized_data, method = "rf")
rf
predict.rf <- predict(rf, test)
confusionMatrix(predict.rf, as.factor(test$tipo))
tune_grid <- expand.grid(mtry = c(2, 5, 7, 9))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = tipo ~ ., data=train, method="rf", trControl=train_control, tuneGrid = tune_grid)
rf
predict.rf <- predict(rf, test)
confusionMatrix(predict.rf, as.factor(test$tipo))
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/10-diabetes")
data <- read.csv("10-diabetes.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method=c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
set.seed(202493)
ind <- createDataPartition(normalized_data$diabetes, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
View(normalized_data)
set.seed(202493)
rf <- train(diabetes ~ ., data = normalized_data, method = "rf")
rf
predict.rf <- predict(rf, test)
confusionMatrix(predict.rf, as.factor(test$diabetes))
tune_grid <- expand.grid(mtry = c(2, 5, 7, 9))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = diabetes ~ ., data=train, method="rf", trControl=train_control, tuneGrid = tune_grid)
rf
# mtry = 2
predict.rf <- predict(rf, test)
confusionMatrix(predict.rf, as.factor(test$tipo))
tune_grid <- expand.grid(mtry = c(2, 5, 7, 9))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = diabetes ~ ., data=train, method="rf", trControl=train_control, tuneGrid = tune_grid)
rf
# mtry = 2
predict.rf <- predict(rf, test)
confusionMatrix(predict.rf, as.factor(test$diabetes))
# Accuracy: 0.7186
install.packages("kernlab")
library(Metrics)
library(stats)
library(mice)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/09-admissão")
data <- read.csv("9-admissao.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
target_data <- data[["ChanceOfAdmit"]]
predictors <- data[, colnames(data) != "ChanceOfAdmit"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "ChanceOfAdmit"
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$ChanceOfAdmit, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
rf <- train(diabetes ~ ., data = normalized_data, method = "rf")
set.seed(202493)
ind <- createDataPartition(normalized_data$ChanceOfAdmit, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
rf <- train(ChanceOfAdmit ~ ., data = normalized_data, method = "rf")
rf
r2 <- function(predicted, observed) {
return (1 - (sum((predicted - observed) ^ 2) / sum((observed - mean(observed)) ^ 2)))
}
syx <- function(predicted, observed) {
n <- length(observed)
syx <- sqrt(sum((observed - predicted)^2) / (n - 2))
return(syx)
}
predict.rf <- predict(rf, test)
rmse(test$ChanceOfAdmit, predict.rf)
r2(predict.rf, test$ChanceOfAdmit)
syx(predict.rf, test$ChanceOfAdmit)
cor(test$ChanceOfAdmit, predict.rf) # Pearson (library stats)
mae(test$ChanceOfAdmit, predict.rf)
tune_grid <- expand.grid(mtry = c(2, 5, 7, 9))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = ChanceOfAdmit ~ ., data=train, method="rf", trControl=train_control, tuneGrid = tune_grid)
rf
predict.rf <- predict(rf, test)
rmse(test$ChanceOfAdmit, predict.rf)
r2(predict.rf, test$ChanceOfAdmit)
syx(predict.rf, test$ChanceOfAdmit)
cor(test$ChanceOfAdmit, predict.rf) # Pearson (library stats)
mae(test$ChanceOfAdmit, predict.rf)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/05-biomassa")
data <- read.csv("5-biomassa.csv")
View(data)
any(is.na(data))
# FALSE
target_data <- data[["biomassa"]]
predictors <- data[, colnames(data) != "biomassa"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "biomassa"
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$biomassa, p=0.8, list=FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
rf <- train(biomassa ~ ., data = normalized_data, method = "rf")
rf
predict.rf <- predict(rf, test)
rmse(test$biomassa, predict.rf)
r2(predict.rf, test$biomassa)
syx(predict.rf, test$biomassa)
cor(test$biomassa, predict.rf) # Pearson (library stats)
mae(test$biomassa, predict.rf)
tune_grid <- expand.grid(mtry = c(1, 3, 5, 7, 9))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = biomassa ~ ., data=train, method="rf", trControl=train_control, tuneGrid = tune_grid)
rf
predict.rf <- predict(rf, test)
rmse(test$biomassa, predict.rf)
r2(predict.rf, test$biomassa)
syx(predict.rf, test$biomassa)
cor(test$biomassa, predict.rf) # Pearson (library stats)
mae(test$biomassa, predict.rf)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/06-veículos")
data <- read.csv("6-veiculos.csv")
View(data)
data$a <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method = c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$tipo, p = 0.8, list = F)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
tune_grid <- expand.grid(mtry = c(2, 5, 7, 9, 11, 13, 15, 17, 19, 21))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = tipo ~ ., data=train, method="rf", trControl=train_control, tuneGrid = tune_grid)
rf
predict.rf <- predict(rf, test)
confusionMatrix(predict.rf, as.factor(test$tipo))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = tipo ~ ., data=train, method="rf", trControl=train_control)
rf
# mtry = 2
predict.rf <- predict(rf, test)
confusionMatrix(predict.rf, as.factor(test$tipo))
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/10-diabetes")
data <- read.csv("10-diabetes.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method=c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$diabetes, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
tune_grid <- expand.grid(mtry = c(1, 3, 5, 7, 9, 11, 13))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = diabetes ~ ., data=train, method="rf", trControl=train_control, tuneGrid = tune_grid)
rf
# mtry = 9
predict.rf <- predict(rf, test)
confusionMatrix(predict.rf, as.factor(test$diabetes))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = diabetes ~ ., data=train, method="rf", trControl=train_control)
rf
# mtry = 9
predict.rf <- predict(rf, test)
confusionMatrix(predict.rf, as.factor(test$diabetes))
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/09-admissão")
data <- read.csv("9-admissao.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
target_data <- data[["ChanceOfAdmit"]]
predictors <- data[, colnames(data) != "ChanceOfAdmit"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "ChanceOfAdmit"
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$ChanceOfAdmit, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = ChanceOfAdmit ~ ., data=train, method="rf", trControl=train_control)
rf
predict.rf <- predict(rf, test)
rmse(test$ChanceOfAdmit, predict.rf)
r2(predict.rf, test$ChanceOfAdmit)
syx(predict.rf, test$ChanceOfAdmit)
cor(test$ChanceOfAdmit, predict.rf) # Pearson (library stats)
mae(test$ChanceOfAdmit, predict.rf)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/05-biomassa")
data <- read.csv("5-biomassa.csv")
View(data)
any(is.na(data))
# FALSE
target_data <- data[["biomassa"]]
predictors <- data[, colnames(data) != "biomassa"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "biomassa"
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$biomassa, p=0.8, list=FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
rf <- train(form = biomassa ~ ., data=train, method="rf", trControl=train_control)
rf
# mtry = 2
predict.rf <- predict(rf, test)
rmse(test$biomassa, predict.rf)
r2(predict.rf, test$biomassa)
syx(predict.rf, test$biomassa)
cor(test$biomassa, predict.rf) # Pearson (library stats)
mae(test$biomassa, predict.rf)
library("caret")
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/06-veículos")
data <- read.csv("6-veiculos.csv")
View(data)
data$a <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method = c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$tipo, p = 0.8, list = F)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
rf <- train(tipo ~ ., data = normalized_data, method = "rf")
rf
new_data <- read.csv("6-veiculos-novos-casos.csv")
View(new_data)
new_data$a <- NULL
any(is.na(new_data))
# FALSE
preproc_center_scale <- preProcess(new_data, method = c("center", "scale"))
normalized_new_data <- predict(preproc_center_scale, new_data)
# Dados normalizados com média centralizada em 0
View(normalized_new_data)
predict.rf_new_data <- predict(rf, normalized_new_data)
predict.rf_new_data
new_data$tipo <- NULL
result <- cbind(new_data, predict.rf_new_data)
names(result)[names(result) == "predict.rf_new_data"] <- "tipo"
View(result)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/10-diabetes")
data <- read.csv("10-diabetes.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method=c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$diabetes, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
# --- Hold out ---
set.seed(202493)
rf <- train(diabetes ~ ., data = normalized_data, method = "rf")
rf
predict.rf <- predict(rf, test)
confusionMatrix(predict.rf, as.factor(test$diabetes))
new_data <- read.csv("6-veiculos-novos-casos.csv")
new_data <- read.csv("10-diabetes-novos-dados.csv")
View(new_data)
new_data$a <- NULL
any(is.na(new_data))
preproc_center_scale <- preProcess(new_data, method = c("center", "scale"))
normalized_new_data <- predict(preproc_center_scale, new_data)
View(normalized_new_data)
predict.rf_new_data <- predict(rf, normalized_new_data)
predict.rf_new_data
new_data$diabetes <- NULL
result <- cbind(new_data, predict.rf_new_data)
names(result)[names(result) == "predict.rf_new_data"] <- "diabetes"
View(result)
library(Metrics)
library(stats)
library(mice)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/09-admissão")
data <- read.csv("9-admissao.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
target_data <- data[["ChanceOfAdmit"]]
predictors <- data[, colnames(data) != "ChanceOfAdmit"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "ChanceOfAdmit"
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$ChanceOfAdmit, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
# --- Hold out ---
set.seed(202493)
rf <- train(ChanceOfAdmit ~ ., data = normalized_data, method = "rf")
rf
predict.rf <- predict(rf, test)
r2(predict.rf, test$ChanceOfAdmit)
new_data <- read.csv("9-admissao-novos-dados.csv")
View(new_data)
new_data$a <- NULL
any(is.na(new_data))
new_target_data <- new_data[["ChanceOfAdmit"]]
new_predictors <- new_data[, colnames(new_data) != "ChanceOfAdmit"]
preproc_center_scale <- preProcess(new_predictors, method=c("center", "scale"))
normalized_new_predictors <- predict(preproc_center_scale, new_predictors)
normalized_new_data <- cbind(normalized_new_predictors, new_target_data)
names(normalized_new_data)[names(normalized_new_data) == "target_data"] <- "ChanceOfAdmit"
# Dados normalizados com média centralizada em 0
View(normalized_new_data)
new_data <- read.csv("9-admissao-novos-dados.csv")
View(new_data)
new_data$num <- NULL
any(is.na(new_data))
# FALSE
new_target_data <- new_data[["ChanceOfAdmit"]]
new_predictors <- new_data[, colnames(new_data) != "ChanceOfAdmit"]
preproc_center_scale <- preProcess(new_predictors, method=c("center", "scale"))
normalized_new_predictors <- predict(preproc_center_scale, new_predictors)
normalized_new_data <- cbind(normalized_new_predictors, new_target_data)
names(normalized_new_data)[names(normalized_new_data) == "target_data"] <- "ChanceOfAdmit"
# Dados normalizados com média centralizada em 0
View(normalized_new_data)
predict.rf_new_data <- predict(rf, normalized_new_data)
predict.rf_new_data
new_data$ChanceOfAdmit <- NULL
result <- cbind(new_data, predict.rf_new_data)
names(result)[names(result) == "predict.rf_new_data"] <- "ChanceOfAdmit"
View(result)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/05-biomassa")
data <- read.csv("5-biomassa.csv")
View(data)
any(is.na(data))
# FALSE
target_data <- data[["biomassa"]]
predictors <- data[, colnames(data) != "biomassa"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "biomassa"
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$biomassa, p=0.8, list=FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
# --- Hold out ---
set.seed(202493)
rf <- train(biomassa ~ ., data = normalized_data, method = "rf")
rf
predict.rf <- predict(rf, test)
r2(predict.rf, test$biomassa)
new_data <- read.csv("5-biomassa-novos-dados.csv")
View(new_data)
any(is.na(new_data))
# FALSE
new_target_data <- new_data[["biomassa"]]
new_predictors <- new_data[, colnames(new_data) != "biomassa"]
preproc_center_scale <- preProcess(new_predictors, method=c("center", "scale"))
normalized_new_predictors <- predict(preproc_center_scale, new_predictors)
normalized_new_data <- cbind(normalized_new_predictors, new_target_data)
names(normalized_new_data)[names(normalized_new_data) == "target_data"] <- "biomassa"
# Dados normalizados com média centralizada em 0
View(normalized_new_data)
names(normalized_new_data)[names(normalized_new_data) == "new_target_data"] <- "biomassa"
predict.rf_new_data <- predict(rf, normalized_new_data)
predict.rf_new_data
new_data$biomassa <- NULL
result <- cbind(new_data, predict.rf_new_data)
names(result)[names(result) == "predict.rf_new_data"] <- "biomassa"
View(result)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/09-admissão")
data <- read.csv("9-admissao.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
target_data <- data[["ChanceOfAdmit"]]
predictors <- data[, colnames(data) != "ChanceOfAdmit"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "ChanceOfAdmit"
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$ChanceOfAdmit, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
# --- Hold out ---
set.seed(202493)
rf_ho <- train(ChanceOfAdmit ~ ., data = normalized_data, method = "rf")
rf_ho
# mtry = 2
predict.rf_ho <- predict(rf_ho, test)
r2(predict.rf_ho, test$ChanceOfAdmit)
test_residuals <- ((test$ChanceOfAdmit - predict.rf_ho) / test$ChanceOfAdmit) * 100
test_residuals
plot(test_residuals, col = "blue", pch = 19, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)")
plot(test_residuals, col = "blue", pch = 19, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
plot(test_residuals, col = "blue", main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
plot(test_residuals, col = "blue", pch = 19, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
plot(test_residuals, col = "blue", pch = 60, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
plot(test_residuals, col = "blue", pch = 20, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
plot(test_residuals, col = "blue", pch = 1, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
plot(test_residuals, col = "blue", pch = 20, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
plot(test_residuals, predict.rf_ho, col = "blue", pch = 20, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
plot(test_residuals[1], predict.rf_ho, col = "blue", pch = 20, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
test_residuals[1]
predict.rf_ho
plot(predict.rf_ho, test_residuals, col = "blue", pch = 20, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "ChanceOfAdmit (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
abline(h = 0, col = "gray")
grid()
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/05-biomassa")
data <- read.csv("5-biomassa.csv")
View(data)
any(is.na(data))
# FALSE
target_data <- data[["biomassa"]]
predictors <- data[, colnames(data) != "biomassa"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "biomassa"
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$biomassa, p=0.8, list=FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
# --- Hold out ---
set.seed(202493)
rf <- train(biomassa ~ ., data = normalized_data, method = "rf")
rf
# mtry = 2
predict.rf <- predict(rf, test)
r2 <- function(predicted, observed) {
return (1 - (sum((predicted - observed) ^ 2) / sum((observed - mean(observed)) ^ 2)))
}
r2(predict.rf_ho, test$biomassa)
set.seed(202493)
ind <- createDataPartition(normalized_data$biomassa, p=0.8, list=FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
# --- Hold out ---
set.seed(202493)
rf_ho <- train(biomassa ~ ., data = normalized_data, method = "rf")
rf_ho
# mtry = 2
predict.rf_ho <- predict(rf_ho, test)
r2(predict.rf_ho, test$biomassa)
test_residuals <- ((test$biomassa - predict.rf_ho) / test$biomassa) * 100
plot(predict.rf_ho, test_residuals, col = "blue", pch = 20, main = "Resíduos (%) - RF Hold Out (Dados teste)", xlab = "biomassa (estimado)", ylab = "Resíduo (%)", ylim=c(-100, 100))
abline(h = 0, col = "gray")
grid()
