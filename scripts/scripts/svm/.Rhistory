install.packages("e1071")
install.packages("caret")
library("caret")
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/06-veículos")
data <- read.csv("6-veiculos.csv")
View(data)
data$a <- NULL
any(is.na(data))
preproc_center_scale <- preProcess(data, method=c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$tipo, p=0.8, list=F)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
svm <- train(tipo ~., data=normalized_data, method="svmRadial")
svm
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$tipo))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svn <- train(form= tipo ~ ., data=train, method="svnRadial", trControl=train_control)
svm <- train(form= tipo ~ ., data=train, method="svmRadial", trControl=train_control)
svm
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$tipo))
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/10-diabetes")
data <- read.csv("10-diabetes.csv")
View(data)
data$num <- NULL
any(is.na(data))
preproc_center_scale <- preProcess(data, method=c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
set.seed(202493)
ind <- createDataPartition(normalized_data$diabetes, p=0.8, list=FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
svm <- train(diabetes ~ ., data = normalized_data, method = "svmRadial")
svm
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$diabetes))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form= tipo ~ ., data=train, method="svmRadial", trControl=train_control)
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form = diabetes ~ ., data = train, method = "svmRadial", trControl = train_control)
svm
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$diabetes))
tune_grid <- expand.grid(C = c(1, 2, 10, 50, 100), sigma = c(0.01, 0.015, 0.2))
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/06-veículos")
data <- read.csv("6-veiculos.csv")
View(data)
data$a <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method = c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
set.seed(202493)
ind <- createDataPartition(normalized_data$tipo, p = 0.8, list = F)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
tune_grid <- expand.grid(C = c(1, 2, 10, 50, 100), sigma = c(0.01, 0.015, 0.2))
set.seed(202493)
svm <- train(tipo ~ ., data = normalized_data, method = "svmRadial", tuneGrid=tune_grid)
svm
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$tipo))
tune_grid <- expand.grid(C = c(1, 2, 10, 50, 100), sigma = c(0.01, 0.015, 0.2))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form= tipo ~ ., data=train, method="svmRadial", trControl=train_control, tuneGrid = tune_grid)
svm
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$tipo))
# 1.b diabetes (classificação)
install.packages("e1071")
install.packages("caret")
library("caret")
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/10-diabetes")
data <- read.csv("10-diabetes.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method=c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
set.seed(202493)
ind <- createDataPartition(normalized_data$diabetes, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
svm <- train(diabetes ~ ., data = normalized_data, method = "svmRadial")
svm
# sigma = 0.1258432; C = 0.25.
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$diabetes))
install.packages("caret")
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/10-diabetes")
data <- read.csv("10-diabetes.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method=c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
set.seed(202493)
ind <- createDataPartition(normalized_data$diabetes, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
svm <- train(diabetes ~ ., data = normalized_data, method = "svmRadial")
svm
# sigma = 0.1258432; C = 0.25.
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$diabetes))
tune_grid <- expand.grid(C = c(1, 2, 10, 50, 100), sigma = c(0.01, 0.015, 0.2))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form = diabetes ~ ., data=train, method="svmRadial", trControl=train_control)
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form = diabetes ~ ., data=train, method="svmRadial", trControl=train_control, tuneGrid = tune_grid)
svm
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$diabetes))
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/09-admissão")
data <- read.csv("9-admissao.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
target_data <- data[["ChanceOfAdmit"]]
predictors <- data[, colnames(data) != "ChanceOfAdmit"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "ChanceOfAdmit"
View(normalized_data)
set.seed(202493)
ind <- createDataPartition(normalized_data$ChanceOfAdmit, p=0.8, list=FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
svm <- train(form=ChanceOfAdmit ~ ., data=train, method="svmRadial")
svm
predict.svm <- predict(svm, test)
r2 <- function(predicted, observed) {
return (1 - (sum((predicted - observed) ^ 2) / sum((observed - mean(observed)) ^ 2)))
}
syx <- function(predicted, observed) {
n <- length(observed)
syx <- sqrt(sum((observed - predicted)^2) / (n - 2))
return(syx)
}
rmse(test$ChanceOfAdmit, predict.rna)
install.packages("mlbench")
install.packages("mice")
library(mlbench)
library(Metrics)
library(stats)
library(mice)
rmse(test$ChanceOfAdmit, predict.rna)
rmse(test$ChanceOfAdmit, predict.svm)
r2(predict.svm, test$ChanceOfAdmit)
syx(predict.svm, test$ChanceOfAdmit)
cor(test$ChanceOfAdmit, predict.svm)
mae(test$ChanceOfAdmit, predict.svm)
tune_grid <- expand.grid(C = c(1, 2, 10, 50, 100), sigma = c(0.01, 0.015, 0.2))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
install.packages("e1071")
install.packages("caret")
library("caret")
library("caret")
tune_grid <- expand.grid(C = c(1, 2, 10, 50, 100), sigma = c(0.01, 0.015, 0.2))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form= tipo ~ ., data=train, method="svmRadial", trControl=train_control, tuneGrid = tune_grid)
svm <- train(form= ChanceOfAdmit ~ ., data=train, method="svmRadial", trControl=train_control, tuneGrid = tune_grid)
svm
predict.svm <- predict(svm, test)
rmse(test$ChanceOfAdmit, predict.svm)
library(Metrics)
rmse(test$ChanceOfAdmit, predict.svm)
# 0.06364335
r2(predict.svm, test$ChanceOfAdmit)
# 0.8025798
syx(predict.svm, test$ChanceOfAdmit)
# 0.06430289
cor(test$ChanceOfAdmit, predict.svm) # Pearson (library stats)
# 0.8979676
mae(test$ChanceOfAdmit, predict.svm)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/05-biomassa")
data <- read.csv("5-biomassa.csv")
View(data)
any(is.na(data))
# FALSE
target_data <- data[["biomassa"]]
predictors <- data[, colnames(data) != "biomassa"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "biomassa"
set.seed(202493)
ind <- createDataPartition(normalized_data$biomassa, p=0.8, list=FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
svm <- train(form=biomassa ~ ., data=train, method="svmRadial")
svm
predict.svm <- predict(svm, test)
rmse(test$biomassa, predict.svm)
# 0.06364335
r2(predict.svm, test$ChanceOfAdmit)
# 0.8025798
syx(predict.svm, test$ChanceOfAdmit)
# 0.06430289
cor(test$ChanceOfAdmit, predict.svm) # Pearson (library stats)
rmse(test$biomassa, predict.svm)
# 0.06364335
r2(predict.svm, test$biomassa)
# 0.8025798
syx(predict.svm, test$biomassa)
# 0.06430289
cor(test$biomassa, predict.svm) # Pearson (library stats)
# 0.8979676
mae(test$biomassa, predict.svm)
tune_grid <- expand.grid(C = c(1, 2, 10, 50, 100), sigma = c(0.01, 0.015, 0.2))
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form= biomassa ~ ., data=train, method="svmRadial", trControl=train_control, tuneGrid = tune_grid)
svm
predict.svm <- predict(svm, test)
rmse(test$biomassa, predict.svm)
# 0.06062261
r2(predict.svm, test$biomassa)
# 0.8208756
syx(predict.svm, test$biomassa)
# 0.06125084
cor(test$biomassa, predict.svm) # Pearson (library stats)
# 0.9091315
mae(test$biomassa, predict.svm)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/06-veículos")
data <- read.csv("6-veiculos.csv")
View(data)
data$a <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method = c("center", "scale"))
install.packages("e1071")
install.packages("caret")
library("caret")
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/06-veículos")
data <- read.csv("6-veiculos.csv")
View(data)
data$a <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method = c("center", "scale"))
library("caret")
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/06-veículos")
data <- read.csv("6-veiculos.csv")
View(data)
data$a <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method = c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
set.seed(202493)
ind <- createDataPartition(normalized_data$tipo, p = 0.8, list = F)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form= tipo ~ ., data=train, method="svmRadial", trControl=train_control)
svm
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$tipo))
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/10-diabetes")
data <- read.csv("10-diabetes.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
preproc_center_scale <- preProcess(data, method=c("center", "scale"))
normalized_data <- predict(preproc_center_scale, data)
# Dados normalizados com média centralizada em 0
set.seed(202493)
ind <- createDataPartition(normalized_data$diabetes, p = 0.8, list = FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form = diabetes ~ ., data=train, method="svmRadial", trControl=train_control)
svm
predict.svm <- predict(svm, test)
confusionMatrix(predict.svm, as.factor(test$diabetes))
install.packages("kernlab")
install.packages("mlbench")
install.packages("mice")
library(mlbench)
library(Metrics)
library(stats)
library(mice)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/09-admissão")
data <- read.csv("9-admissao.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
target_data <- data[["ChanceOfAdmit"]]
predictors <- data[, colnames(data) != "ChanceOfAdmit"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
library("caret")
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/09-admissão")
data <- read.csv("9-admissao.csv")
View(data)
data$num <- NULL
any(is.na(data))
# FALSE
target_data <- data[["ChanceOfAdmit"]]
predictors <- data[, colnames(data) != "ChanceOfAdmit"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "ChanceOfAdmit"
set.seed(202493)
ind <- createDataPartition(normalized_data$ChanceOfAdmit, p=0.8, list=FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
set.seed(202493)
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form= ChanceOfAdmit ~ ., data=train, method="svmRadial", trControl=train_control)
svm
predict.svm <- predict(svm, test)
rmse(test$ChanceOfAdmit, predict.svm)
r2(predict.svm, test$ChanceOfAdmit)
syx(predict.svm, test$ChanceOfAdmit)
cor(test$ChanceOfAdmit, predict.svm) # Pearson (library stats)
mae(test$ChanceOfAdmit, predict.svm)
setwd("/Users/cassi/dev/_estudos/pos-iaa/IAA008-aprendizado-maquina/bases-de-dados/05-biomassa")
data <- read.csv("5-biomassa.csv")
View(data)
any(is.na(data))
# FALSE
target_data <- data[["biomassa"]]
predictors <- data[, colnames(data) != "biomassa"]
preproc_center_scale <- preProcess(predictors, method=c("center", "scale"))
normalized_predictors <- predict(preproc_center_scale, predictors)
normalized_data <- cbind(normalized_predictors, target_data)
names(normalized_data)[names(normalized_data) == "target_data"] <- "biomassa"
set.seed(202493)
ind <- createDataPartition(normalized_data$biomassa, p=0.8, list=FALSE)
train <- normalized_data[ind,]
test <- normalized_data[-ind,]
train_control <- trainControl(method = "cv", number = 10)
svm <- train(form= biomassa ~ ., data=train, method="svmRadial", trControl=train_control)
svm
predict.svm <- predict(svm, test)
rmse(test$biomassa, predict.svm)
r2(predict.svm, test$biomassa)
syx(predict.svm, test$biomassa)
cor(test$biomassa, predict.svm) # Pearson (library stats)
mae(test$biomassa, predict.svm)
